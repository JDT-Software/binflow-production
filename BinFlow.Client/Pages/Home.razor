@page "/"
@using BinFlow.Shared.Models
@using BinFlow.Client.Services
@inject IProductionService ProductionService
@inject IJSRuntime JSRuntime

<PageTitle>BinFlow</PageTitle>

<style>
    .top-row {
        background-color: var(--dominant-color);
    }
    :root {
        --dominant-color: #D8C99B;
        --secondary-color: #273E47;
        --accent-color: #D8973C;
    }
    
    body {
        background-color: var(--dominant-color);
    }
    
    .hero-gradient {
        background: linear-gradient(135deg, var(--secondary-color) 0%, #1a2b33 100%);
    }
    
    .card-secondary {
        background-color: var(--secondary-color);
        color: white;
    }
    
    .card-accent {
        background-color: var(--accent-color);
        color: white;
    }
    
    .btn-accent {
        background-color: var(--accent-color);
        border-color: var(--accent-color);
        color: white;
    }
    
    .btn-accent:hover {
        background-color: #c07e2a;
        border-color: #c07e2a;
        color: white;
    }
    
    .stats-card-1 {
        background: linear-gradient(135deg, var(--accent-color) 0%, #e6a54a 100%);
    }
    
    .stats-card-2 {
        background: linear-gradient(135deg, var(--secondary-color) 0%, #334b56 100%);
    }
    
    .stats-card-3 {
        background: linear-gradient(135deg, #8b4513 0%, #a0522d 100%);
    }
    
    .stats-card-4 {
        background: linear-gradient(135deg, #2c5530 0%, #3e7b3e 100%);
    }
    
    .icon-lg {
        font-size: 2.5rem;
    }
    
    .icon-xl {
        font-size: 4rem;
    }

    /* Remove unwanted borders and focus outlines */
    h1, h1:focus, h1:active,
    .display-4, .display-4:focus, .display-4:active {
        outline: none !important;
        border: none !important;
        box-shadow: none !important;
    }

    /* Remove focus outlines from all elements to prevent the loading issue */
    *:focus {
        outline: none !important;
    }

    /* Specifically target the BinFlow title */
    .fw-bold:focus {
        outline: none !important;
        border: none !important;
    }
</style>

<div class="container-fluid mt-4">
    <!-- Hero Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-0 shadow-lg hero-gradient text-white">
                <div class="card-body p-5">
                    <div class="row align-items-center">
                        <div class="col-md-8">
                            <h1 class="display-4 fw-bold mb-3">
                                BinFlow
                            </h1>
                            <p class="lead mb-4">Real-time production monitoring and shift management for optimal efficiency</p>
                            <div class="d-flex flex-wrap gap-2">
                                <span class="badge bg-light text-dark fs-6 px-3 py-2">
                                    <i class="bi bi-graph-up me-2"></i>Live Analytics
                                </span>
                                <span class="badge bg-light text-dark fs-6 px-3 py-2">
                                    <i class="bi bi-lightning me-2"></i>Real-time Data
                                </span>
                                <span class="badge bg-light text-dark fs-6 px-3 py-2">
                                    <i class="bi bi-bullseye me-2"></i>Performance Tracking
                                </span>
                            </div>
                        </div>
                        <div class="col-md-4 text-center">
                            <div class="icon-xl mb-3">
                                <i class="bi bi-bar-chart-line"></i>
                            </div>
                            <h3 class="fw-bold">@DateTime.Now.ToString("HH:mm")</h3>
                            <p class="mb-0">@DateTime.Now.ToString("dddd, MMMM dd, yyyy")</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Quick Stats Overview -->
    @if (hasData)
    {
        <div class="row mb-4">
            <div class="col-md-3 col-6 mb-3">
                <div class="card h-100 border-0 shadow stats-card-1 text-white">
                    <div class="card-body text-center">
                        <div class="icon-xl mb-2">
                            <i class="bi bi-box-seam"></i>
                        </div>
                        <h3 class="fw-bold">@totalBinsToday.ToString("N0")</h3>
                        <p class="mb-0">Bins Today</p>
                        <small class="opacity-75">@hourlyEntriesCount entries</small>
                    </div>
                </div>
            </div>
            <div class="col-md-3 col-6 mb-3">
                <div class="card h-100 border-0 shadow stats-card-2 text-white">
                    <div class="card-body text-center">
                        <div class="icon-xl mb-2">
                            <i class="bi bi-speedometer2"></i>
                        </div>
                        <h3 class="fw-bold">@avgWeightToday.ToString("N0")</h3>
                        <p class="mb-0">Avg Weight (kg)</p>
                        <small class="opacity-75">Per bin average</small>
                    </div>
                </div>
            </div>
            <div class="col-md-3 col-6 mb-3">
                <div class="card h-100 border-0 shadow stats-card-3 text-white">
                    <div class="card-body text-center">
                        <div class="icon-xl mb-2">
                            <i class="bi bi-stopwatch"></i>
                        </div>
                        <h3 class="fw-bold">@totalDowntimeToday</h3>
                        <p class="mb-0">Downtime (min)</p>
                        <small class="opacity-75">Total today</small>
                    </div>
                </div>
            </div>
            <div class="col-md-3 col-6 mb-3">
                <div class="card h-100 border-0 shadow stats-card-4 text-white">
                    <div class="card-body text-center">
                        <div class="icon-xl mb-2">
                            <i class="bi bi-box-seam"></i>
                        </div>
                        <h3 class="fw-bold">@avgBinsPerHour.ToString("N1")</h3>
                        <p class="mb-0">Bins/Hour</p>
                        <small class="opacity-75">Today's average</small>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Quick Actions -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow card-secondary">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="bi bi-rocket-takeoff me-2"></i>Quick Actions
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-4">
                            <a href="/hourly-entry" class="btn btn-lg btn-success w-100 py-3 text-decoration-none">
                                <div class="d-flex align-items-center justify-content-center">
                                    <i class="bi bi-clock icon-lg me-3"></i>
                                    <div>
                                        <div class="fw-bold">Hourly Entry</div>
                                        <small>Quick hourly data entry</small>
                                    </div>
                                </div>
                            </a>
                        </div>
                        <div class="col-md-4">
                            <a href="/reports" class="btn btn-lg btn-info w-100 py-3 text-decoration-none">
                                <div class="d-flex align-items-center justify-content-center">
                                    <i class="bi bi-clipboard-data icon-lg me-3"></i>
                                    <div>
                                        <div class="fw-bold">Shift Reports</div>
                                        <small>View shift reports table</small>
                                    </div>
                                </div>
                            </a>
                        </div>
                        <div class="col-md-4">
                            <a href="/dashboard" class="btn btn-lg btn-warning w-100 py-3 text-decoration-none">
                                <div class="d-flex align-items-center justify-content-center">
                                    <i class="bi bi-pie-chart icon-lg me-3"></i>
                                    <div>
                                        <div class="fw-bold">Dashboard</div>
                                        <small>Analytics & trends</small>
                                    </div>
                                </div>
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Today's Recent Activity -->
    @if (todaysHourlyEntries.Any())
    {
        <div class="row mb-4">
            <div class="col-md-8">
                <div class="card shadow card-secondary">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="bi bi-clock-history me-2"></i>Today's Hourly Entries
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-hover table-dark">
                                <thead class="table-light">
                                    <tr>
                                        <th><i class="bi bi-clock me-1"></i>Time</th>
                                        <th><i class="bi bi-person-badge me-1"></i>Manager</th>
                                        <th><i class="bi bi-shift me-1"></i>Shift</th>
                                        <th class="text-center"><i class="bi bi-box me-1"></i>Bins</th>
                                        <th class="text-center"><i class="bi bi-weight me-1"></i>Weight</th>
                                        <th class="text-center"><i class="bi bi-stopwatch me-1"></i>Downtime</th>
                                        <th class="text-center"><i class="bi bi-check-circle me-1"></i>Status</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var entry in todaysHourlyEntries.OrderByDescending(e => e.Time).Take(8))
                                    {
                                        <tr>
                                            <td>
                                                <span class="badge bg-primary">@FormatTime(entry.Time)</span>
                                            </td>
                                            <td>@entry.LineManager</td>
                                            <td>
                                                <span class="badge" style="background-color: var(--accent-color);">@entry.Shift</span>
                                            </td>
                                            <td class="text-center">
                                                <span class="fw-bold @(entry.BinsTipped >= 65 ? "text-success" : "text-warning")">@entry.BinsTipped</span>
                                            </td>
                                            <td class="text-center">@entry.AverageBinWeight.ToString("N0") kg</td>
                                            <td class="text-center">
                                                @if (entry.DownTime == 0)
                                                {
                                                    <span class="badge bg-success">0</span>
                                                }
                                                else if (entry.DownTime <= 30)
                                                {
                                                    <span class="badge bg-warning text-dark">@entry.DownTime</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-danger">@entry.DownTime</span>
                                                }
                                            </td>
                                            <td class="text-center">
                                                @if (entry.IsLunchBreak)
                                                {
                                                    <span class="badge bg-info">
                                                        <i class="bi bi-cup-hot"></i>
                                                    </span>
                                                }
                                                else if (entry.BinsTipped >= 65 && entry.DownTime <= 30)
                                                {
                                                    <span class="badge bg-success">
                                                        <i class="bi bi-check-circle"></i>
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-warning">
                                                        <i class="bi bi-exclamation-triangle"></i>
                                                    </span>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        <div class="text-center mt-3">
                            <a href="/hourly-entry" class="btn btn-outline-light">
                                <i class="bi bi-plus-circle me-2"></i>Add New Entry
                            </a>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card shadow card-secondary">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="bi bi-bullseye me-2"></i>Performance Targets
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-4">
                            <div class="d-flex justify-content-between mb-2">
                                <span><i class="bi bi-calendar-day me-2"></i>Daily Bins Target</span>
                                <span class="fw-bold">1380</span>
                            </div>
                            <div class="progress" style="height: 8px;">
                                <div class="progress-bar" style="width: @(Math.Min(100, (totalBinsToday / 600.0) * 100))%; background-color: var(--accent-color);"></div>
                            </div>
                            <small class="text-light opacity-75">@totalBinsToday / 1380 bins</small>
                        </div>
                        
                        <div class="mb-4">
                            <div class="d-flex justify-content-between mb-2">
                                <span><i class="bi bi-speedometer2 me-2"></i>Bins/Hour Target</span>
                                <span class="fw-bold">65+</span>
                            </div>
                            <div class="progress" style="height: 8px;">
                                <div class="progress-bar" style="width: @(Math.Min(100, (efficiencyToday / 65.0) * 100))%; background-color: #28a745;"></div>
                            </div>
                            <small class="text-light opacity-75">@efficiencyToday.ToString("N1") / 65 bins/hour</small>
                        </div>

                        <div class="mb-3">
                            <div class="d-flex justify-content-between mb-2">
                                <span><i class="bi bi-clock me-2"></i>Hourly Target</span>
                                <span class="fw-bold">65+ bins/hr</span>
                            </div>
                            <div class="progress" style="height: 8px;">
                                <div class="progress-bar" style="width: @(Math.Min(100, (avgBinsPerHour / 65.0) * 100))%; background-color: #ffc107;"></div>
                            </div>
                            <small class="text-light opacity-75">@avgBinsPerHour.ToString("N1") avg/hour</small>
                        </div>

                        <div class="text-center mt-4">
                            <div class="row text-center">
                                <div class="col">
                                    @if (efficiencyToday >= 65 && avgBinsPerHour >= 65)
                                    {
                                        <div class="text-success fw-bold">
                                            <i class="bi bi-check-circle-fill me-2"></i>Excellent
                                        </div>
                                        <small class="text-light opacity-75">Above target</small>
                                    }
                                    else if (efficiencyToday >= 50 || avgBinsPerHour >= 50)
                                    {
                                        <div class="text-warning fw-bold">
                                            <i class="bi bi-exclamation-triangle-fill me-2"></i>Good
                                        </div>
                                        <small class="text-light opacity-75">Room for improvement</small>
                                    }
                                    else
                                    {
                                        <div class="text-danger fw-bold">
                                            <i class="bi bi-arrow-up-circle-fill me-2"></i>Needs Focus
                                        </div>
                                        <small class="text-light opacity-75">Below targets</small>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else if (!hasData)
    {
        <!-- No Data State -->
        <div class="row">
            <div class="col-12">
                <div class="card shadow text-center py-5 card-secondary">
                    <div class="card-body">
                        <div class="icon-xl text-light opacity-50 mb-4">
                            <i class="bi bi-graph-up"></i>
                        </div>
                        <h3 class="text-light mb-3">No Production Data Yet</h3>
                        <p class="text-light opacity-75 mb-4">Start by entering your first hourly data to see analytics and reports here.</p>
                        <a href="/hourly-entry" class="btn btn-accent btn-lg">
                            <i class="bi bi-clock me-2"></i>Enter First Hourly Data
                        </a>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- System Status Footer -->
    <div class="row mt-5 mb-3">
        <div class="col-12">
            <div class="card border-0" style="background-color: rgba(255,255,255,0.1);">
                <div class="card-body py-3">
                    <div class="row align-items-center text-center text-md-start">
                        <div class="col-md-3">
                            <small class="text-muted">
                                <span class="badge bg-success me-2">
                                    <i class="bi bi-circle-fill"></i>
                                </span>
                                System Online
                            </small>
                        </div>
                        <div class="col-md-3">
                            <small class="text-muted">
                                <i class="bi bi-globe me-2"></i>Database Connected
                            </small>
                        </div>
                        <div class="col-md-3">
                            <small class="text-muted">
                                <i class="bi bi-arrow-clockwise me-2"></i>Last Updated: @DateTime.Now.ToString("HH:mm")
                            </small>
                        </div>
                        <div class="col-md-3">
                            <small class="text-muted">
                                <i class="bi bi-building me-2"></i>SoftFlair BinFlow v1.6
                            </small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<ShiftReport> recentReports = new();
    private List<HourlyEntryDisplay> todaysHourlyEntries = new();
    private int totalBinsToday = 0;
    private double avgWeightToday = 0;
    private int totalDowntimeToday = 0;
    private double efficiencyToday = 0;
    private int hourlyEntriesCount = 0;
    private double avgBinsPerHour = 0;
    private bool hasData = false;

    // Helper class to display hourly entries
    private class HourlyEntryDisplay
    {
        public TimeSpan Time { get; set; }
        public int BinsTipped { get; set; }
        public double AverageBinWeight { get; set; }
        public int DownTime { get; set; }
        public bool IsLunchBreak { get; set; }
        public string LineManager { get; set; } = "";
        public string Shift { get; set; } = "";
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        
        if (firstRender)
        {
            // Refresh data every 30 seconds
            var timer = new System.Timers.Timer(30000);
            timer.Elapsed += async (sender, e) => 
            {
                await InvokeAsync(async () =>
                {
                    await LoadDashboardData();
                    StateHasChanged();
                });
            };
            timer.Start();
        }
    }

private async Task LoadDashboardData()
{
    try
    {
        // 🔧 FIXED: Use dashboard endpoint like Dashboard page does
        var dashboardStats = await ProductionService.GetDashboardStatsAsync();
        
        if (dashboardStats != null)
        {
            hasData = true;
            
            // 🔧 Use dashboard calculated stats directly
            totalBinsToday = dashboardStats.TotalBinsTippedToday;
            totalDowntimeToday = dashboardStats.TotalDowntimeToday;
            efficiencyToday = dashboardStats.AverageEfficiencyToday;
            hourlyEntriesCount = dashboardStats.TotalShiftsToday;
            
            // 🔧 FIXED: Get weight from recent metrics (any recent data, not just today)
            if (dashboardStats.RecentMetrics?.Any() == true)
            {
                avgWeightToday = dashboardStats.RecentMetrics.Average(m => m.AverageWeight);
            }
            else
            {
                avgWeightToday = 0;
            }
            
            // 🔧 FIXED: Calculate proper bins per hour
            avgBinsPerHour = hourlyEntriesCount > 0 ? (double)totalBinsToday / hourlyEntriesCount : 0;
            
            // 🔧 Load today's detailed entries for the table
            var todayReports = await ProductionService.GetShiftReportsByDateRangeAsync(DateTime.Today, DateTime.Today);
            await LoadTodaysHourlyEntries(todayReports);
        }
        else
        {
            hasData = false;
            // Reset all stats
            totalBinsToday = 0;
            avgWeightToday = 0;
            totalDowntimeToday = 0;
            efficiencyToday = 0;
            hourlyEntriesCount = 0;
            avgBinsPerHour = 0;
        }
    }
    catch (Exception ex)
    {
        // Log error and ensure hasData is false
        await JSRuntime.InvokeVoidAsync("console.error", $"Error loading dashboard data: {ex.Message}");
        hasData = false;
    }
}

    private async Task LoadTodaysHourlyEntries(List<ShiftReport> todayReports)
    {
        try
        {
            foreach (var report in todayReports)
            {
                // Since we don't have direct access to hourly entries yet,
                // we'll create entries based on the shift report data
                // This assumes each shift report represents aggregated hourly data
                
                // For now, we'll treat each shift report as representing some hourly entries
                // You can modify this logic once you have access to individual hourly entries
                
                if (report.TotalTipped > 0)
                {
                    // Create a representative entry from the shift report
                    todaysHourlyEntries.Add(new HourlyEntryDisplay
                    {
                        Time = DateTime.Now.TimeOfDay, // Default to current time
                        BinsTipped = report.TotalTipped,
                        AverageBinWeight = report.AverageWeight,
                        DownTime = report.TotalDowntime,
                        IsLunchBreak = false,
                        LineManager = report.LineManager,
                        Shift = report.Shift
                    });
                }
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error loading hourly entries: {ex.Message}");
        }
    }

    private double CalculateEfficiency(int totalBins, int workingEntries, int targetBinsPerHour = 65)
    {
        if (workingEntries <= 0) return 0;
        var binsPerHour = (double)totalBins / workingEntries;
        return Math.Min(100, (binsPerHour / targetBinsPerHour) * 100);
    }

    private double CalculateEfficiency(int totalDowntime, int shiftDurationMinutes = 480)
    {
        // Legacy method - kept for backward compatibility
        if (shiftDurationMinutes <= 0) return 0;
        var workingTime = shiftDurationMinutes - totalDowntime;
        return workingTime > 0 ? (double)workingTime / shiftDurationMinutes * 100 : 0;
    }

    private string FormatTime(TimeSpan time)
    {
        return $"{time.Hours:D2}:{time.Minutes:D2}";
    }
}