@page "/reports"
@using BinFlow.Shared.Models
@using BinFlow.Client.Services
@inject IProductionService ProductionService
@inject IJSRuntime JSRuntime

<PageTitle>BinFlow - Shift Reports</PageTitle>

<style>
    :root {
        --dominant-color: #D8C99B;
        --secondary-color: #273E47;
        --accent-color: #D8973C;
    }
    
    .stats-card-1 {
        background: linear-gradient(135deg, var(--accent-color) 0%, #e6a54a 100%);
    }
    
    .stats-card-2 {
        background: linear-gradient(135deg, var(--secondary-color) 0%, #334b56 100%);
    }
    
    .stats-card-3 {
        background: linear-gradient(135deg, #8b4513 0%, #a0522d 100%);
    }
    
    .stats-card-4 {
        background: linear-gradient(135deg, #2c5530 0%, #3e7b3e 100%);
    }
    
    .icon-lg {
        font-size: 2.5rem;
    }
    
    .icon-xl {
        font-size: 4rem;
    }
    
    .card-secondary {
        background-color: var(--secondary-color);
        color: white;
    }
    
    .btn-accent {
        background-color: var(--accent-color);
        border-color: var(--accent-color);
        color: white;
    }
    
    .btn-accent:hover {
        background-color: #c07e2a;
        border-color: #c07e2a;
        color: white;
    }
    
    .badge-accent {
        background-color: var(--accent-color);
        color: white;
    }
</style>

<div class="production-reports-page">
<div class="container-fluid mt-4">
    <!-- Header -->
    <div class="card mb-4 shadow card-secondary">
        <div class="card-body">
            <div class="row align-items-center">
                <div class="col-md-8">
                    <h2 class="mb-2 text-white">
                        <i class="bi bi-clipboard-data icon-md me-3"></i>Shift Reports & Analytics
                    </h2>
                    <p class="text-light opacity-75">View detailed shift performance data and production analytics</p>
                </div>
                <div class="col-md-4 text-md-end">
                    <button class="btn btn-outline-light me-2" @onclick="RefreshReports">
                        <i class="bi bi-arrow-clockwise me-2"></i>Refresh
                    </button>
                    <a href="/hourly-entry" class="btn btn-accent">
                        <i class="bi bi-plus-circle me-2"></i>Add New Entry
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="card mb-4 shadow">
        <div class="card-header card-secondary">
            <h5 class="mb-0 text-white">
                <i class="bi bi-funnel me-2"></i>Filters
            </h5>
        </div>
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-3">
                    <label class="form-label fw-bold">
                        <i class="bi bi-calendar3 me-1"></i>From Date
                    </label>
                    <input type="date" class="form-control" value="@fromDateString" @onchange="@((e) => { fromDateString = e.Value?.ToString() ?? ""; FilterReports(); })" />
                </div>
                <div class="col-md-3">
                    <label class="form-label fw-bold">
                        <i class="bi bi-calendar3 me-1"></i>To Date
                    </label>
                    <input type="date" class="form-control" value="@toDateString" @onchange="@((e) => { toDateString = e.Value?.ToString() ?? ""; FilterReports(); })" />
                </div>
                <div class="col-md-3">
                    <label class="form-label fw-bold">
                        <i class="bi bi-person-badge me-1"></i>Line Manager
                    </label>
                    <select class="form-select" @bind="selectedLineManager" @bind:event="onchange">
                        <option value="">All Managers</option>
                        @foreach (var manager in uniqueManagers)
                        {
                            <option value="@manager">@manager</option>
                        }
                    </select>
                </div>
                <div class="col-md-3">
                    <label class="form-label fw-bold">
                        <i class="bi bi-clock me-1"></i>Shift
                    </label>
                    <select class="form-select" @bind="selectedShift" @bind:event="onchange">
                        <option value="">All Shifts</option>
                        <option value="Day">‚òÄÔ∏è Day</option>
                        <option value="Night">üåô Night</option>

                    </select>
                </div>
            </div>
        </div>
    </div>

    <!-- Summary Stats -->
    @if (filteredReports.Any())
    {
        <div class="row mb-4">
            <div class="col-md-3 col-6 mb-3">
                <div class="card h-100 border-0 shadow stats-card-1 text-white">
                    <div class="card-body text-center">
                        <div class="icon-xl mb-2">
                            <i class="bi bi-file-earmark-text"></i>
                        </div>
                        <h3 class="fw-bold">@filteredReports.Count</h3>
                        <p class="mb-0">Total Shifts</p>
                        <small class="opacity-75">@filteredReports.Count entries</small>
                    </div>
                </div>
            </div>
            <div class="col-md-3 col-6 mb-3">
                <div class="card h-100 border-0 shadow stats-card-2 text-white">
                    <div class="card-body text-center">
                        <div class="icon-xl mb-2">
                            <i class="bi bi-box-seam"></i>
                        </div>
                        <h3 class="fw-bold">@filteredReports.Sum(r => r.TotalTipped).ToString("N0")</h3>
                        <p class="mb-0">Total Bins</p>
                        <small class="opacity-75">Sum of all shifts</small>
                    </div>
                </div>
            </div>
            <div class="col-md-3 col-6 mb-3">
                <div class="card h-100 border-0 shadow stats-card-3 text-white">
                    <div class="card-body text-center">
                        <div class="icon-xl mb-2">
                            <i class="bi bi-speedometer2"></i>
                        </div>
                        <h3 class="fw-bold">@GetAverageWeight().ToString("N0")</h3>
                        <p class="mb-0">Avg Weight (kg)</p>
                        <small class="opacity-75">Per bin average</small>
                    </div>
                </div>
            </div>
            <div class="col-md-3 col-6 mb-3">
                <div class="card h-100 border-0 shadow stats-card-4 text-white">
                    <div class="card-body text-center">
                        <div class="icon-xl mb-2">
                            <i class="bi bi-box-seam"></i>
                        </div>
                        <h3 class="fw-bold">@GetAverageEfficiency().ToString("N1")</h3>
                        <p class="mb-0">Avg Bins/Hour</p>
                        <small class="opacity-75">Today's average</small>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Reports Table -->
    <div class="card shadow">
        <div class="card-header card-secondary">
            <h5 class="mb-0 text-white">
                <i class="bi bi-table me-2"></i>Shift Reports (@filteredReports.Count)
            </h5>
        </div>
        <div class="card-body">
            @if (isLoading)
            {
                <div class="text-center py-5">
                    <div class="spinner-border" style="color: var(--accent-color); width: 3rem; height: 3rem;" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-3" style="color: var(--secondary-color);">Loading shift reports...</p>
                </div>
            }
            else if (filteredReports.Any())
            {
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th><i class="bi bi-calendar3 me-1"></i>Date</th>
                                <th><i class="bi bi-person-badge me-1"></i>Line Manager</th>
                                <th><i class="bi bi-clock me-1"></i>Shift</th>
                                <th class="text-center"><i class="bi bi-box me-1"></i>Total Bins</th>
                                <th class="text-center"><i class="bi bi-weight me-1"></i>Avg Weight</th>
                                <th class="text-center"><i class="bi bi-stopwatch me-1"></i>Downtime</th>
                                <th class="text-center"><i class="bi bi-speedometer2 me-1"></i>Bins/Hour</th>
                                <th class="text-center"><i class="bi bi-list-ol me-1"></i>Entries</th>
                                <th class="text-center"><i class="bi bi-gear me-1"></i>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var report in filteredReports.OrderByDescending(r => r.Date))
                            {
                                <tr>
                                    <td>
                                        <strong>@report.Date.ToString("dd/MM/yyyy")</strong>
                                        <br>
                                        <small class="text-muted">@report.Date.ToString("dddd")</small>
                                    </td>
                                    <td>
                                        <span class="fw-bold">@report.LineManager</span>
                                    </td>
                                    <td>
                                        <span class="badge badge-accent">@report.Shift</span>
                                    </td>
                                    <td class="text-center">
                                        <span class="fw-bold text-success fs-5">@report.TotalTipped</span>
                                    </td>
                                    <td class="text-center">
                                        <span class="fw-bold">@report.AverageWeight.ToString("N0")</span>
                                        <small class="text-muted d-block">kg</small>
                                    </td>
                                    <td class="text-center">
                                        @if (report.TotalDowntime > 0)
                                        {
                                            <span class="badge bg-warning text-dark">@report.TotalDowntime min</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-success">0 min</span>
                                        }
                                    </td>
                                    <td class="text-center">
                                        @{
                                            var binsPerHour = CalculateEfficiency(report);
                                            var badgeClass = binsPerHour >= 65 ? "bg-success" : binsPerHour >= 50 ? "bg-warning text-dark" : "bg-danger";
                                        }
                                        <span class="badge @badgeClass fs-6">@binsPerHour.ToString("N1")</span>
                                    </td>
                                    <td class="text-center">
                                        <span class="badge bg-info">@GetEntryCount(report)</span>
                                    </td>
                                    <td class="text-center">
                                        <button class="btn btn-sm btn-outline-primary me-1" @onclick="() => ViewReportDetails(report)">
                                            <i class="bi bi-eye"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline-warning me-1" @onclick="() => EditReport(report)">
                                            <i class="bi bi-pencil"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteReport(report.Id)">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <div class="icon-lg mb-4" style="color: var(--secondary-color); opacity: 0.5;">
                        <i class="bi bi-clipboard-data"></i>
                    </div>
                    <h4 class="mb-3" style="color: var(--secondary-color);">No Shift Reports Found</h4>
                    <p class="text-muted mb-4">@(allReports.Any() ? "Try adjusting your filters above." : "Start by creating your first shift report.")</p>
                    <a href="/hourly-entry" class="btn btn-accent btn-lg">
                        <i class="bi bi-plus-circle me-2"></i>Create New Entry
                    </a>
                </div>
            }
        </div>
    </div>

    <!-- Report Details Modal -->
    @if (selectedReport != null && !isEditing)
    {
        <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog modal-xl">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">
                            <i class="bi bi-clipboard-data me-2"></i>Shift Report Details - @selectedReport.Date.ToString("dd/MM/yyyy") (@selectedReport.Shift)
                        </h5>
                        <button type="button" class="btn-close" @onclick="CloseReportDetails"></button>
                    </div>
                    <div class="modal-body">
                        <!-- Report Header Info -->
                        <div class="row mb-4">
                            <div class="col-md-3">
                                <div class="card bg-light">
                                    <div class="card-body text-center">
                                        <i class="bi bi-calendar3 mb-2 d-block" style="font-size: 1.5rem; color: var(--accent-color);"></i>
                                        <h6>Date</h6>
                                        <p class="mb-0 fw-bold">@selectedReport.Date.ToString("dd/MM/yyyy")</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="card bg-light">
                                    <div class="card-body text-center">
                                        <i class="bi bi-person-badge mb-2 d-block" style="font-size: 1.5rem; color: var(--accent-color);"></i>
                                        <h6>Line Manager</h6>
                                        <p class="mb-0 fw-bold">@selectedReport.LineManager</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="card bg-light">
                                    <div class="card-body text-center">
                                        <i class="bi bi-clock mb-2 d-block" style="font-size: 1.5rem; color: var(--accent-color);"></i>
                                        <h6>Shift</h6>
                                        <p class="mb-0"><span class="badge badge-accent">@selectedReport.Shift</span></p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="card bg-light">
                                    <div class="card-body text-center">
                                        <i class="bi bi-clock-history mb-2 d-block" style="font-size: 1.5rem; color: var(--accent-color);"></i>
                                        <h6>Created</h6>
                                        <p class="mb-0 fw-bold">@selectedReport.CreatedAt.ToString("HH:mm")</p>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Performance Summary -->
                        <div class="row mb-4">
                            <div class="col-md-3">
                                <div class="card text-white stats-card-2">
                                    <div class="card-body text-center">
                                        <i class="bi bi-box-seam mb-2 d-block" style="font-size: 2rem;"></i>
                                        <h4 class="fw-bold">@selectedReport.TotalTipped</h4>
                                        <p class="mb-0">Total Bins</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="card text-white stats-card-1">
                                    <div class="card-body text-center">
                                        <i class="bi bi-speedometer2 mb-2 d-block" style="font-size: 2rem;"></i>
                                        <h4 class="fw-bold">@selectedReport.AverageWeight.ToString("N0")</h4>
                                        <p class="mb-0">Avg Weight (kg)</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="card text-white stats-card-3">
                                    <div class="card-body text-center">
                                        <i class="bi bi-stopwatch mb-2 d-block" style="font-size: 2rem;"></i>
                                        <h4 class="fw-bold">@selectedReport.TotalDowntime</h4>
                                        <p class="mb-0">Downtime (min)</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="card text-white stats-card-4">
                                    <div class="card-body text-center">
                                        <i class="bi bi-box-seam mb-2 d-block" style="font-size: 2rem;"></i>
                                        <h4 class="fw-bold">@CalculateEfficiency(selectedReport).ToString("N1")</h4>
                                        <p class="mb-0">Avg Bins/Hour</p>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Detailed Entries -->
                        @if (reportEntries.Any())
                        {
                            <h6 class="mb-3" style="color: var(--secondary-color);">
                                <i class="bi bi-list-check me-2"></i>Detailed Entries (@reportEntries.Count)
                            </h6>
                            <div class="table-responsive">
                                <table class="table table-sm table-striped">
                                    <thead class="table-light">
                                        <tr>
                                            <th><i class="bi bi-clock me-1"></i>Time</th>
                                            <th class="text-center"><i class="bi bi-box me-1"></i>Bins</th>
                                            <th class="text-center"><i class="bi bi-weight me-1"></i>Weight</th>
                                            <th class="text-center"><i class="bi bi-stopwatch me-1"></i>Downtime</th>
                                            <th><i class="bi bi-chat-text me-1"></i>Reason</th>
                                            <th class="text-center"><i class="bi bi-tag me-1"></i>Type</th>
                                            <th class="text-center"><i class="bi bi-gear me-1"></i>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var entry in reportEntries.OrderBy(e => e.Time))
                                        {
                                            @if (editingEntryId == entry.Time)
                                            {
                                                <!-- Edit Row -->
                                                <tr class="table-warning">
                                                    <td>
                                                        <span class="badge bg-secondary">@FormatTime(entry.Time)</span>
                                                    </td>
                                                    <td class="text-center">
                                                        <input type="number" class="form-control form-control-sm" style="width: 80px;" 
                                                               @bind="editEntryBinsTipped" min="0" />
                                                    </td>
                                                    <td class="text-center">
                                                        <input type="number" class="form-control form-control-sm" style="width: 80px;" 
                                                               @bind="editEntryWeight" min="0" step="1" />
                                                    </td>
                                                    <td class="text-center">
                                                        <input type="number" class="form-control form-control-sm" style="width: 80px;" 
                                                               @bind="editEntryDowntime" min="0" />
                                                    </td>
                                                    <td>
                                                        <input type="text" class="form-control form-control-sm" 
                                                               @bind="editEntryReason" placeholder="Reason for downtime" />
                                                    </td>
                                                    <td class="text-center">
                                                        <div class="form-check form-switch d-inline-block">
                                                            <input class="form-check-input" type="checkbox" @bind="editEntryIsLunch" />
                                                            <label class="form-check-label small">Lunch</label>
                                                        </div>
                                                    </td>
                                                    <td class="text-center">
                                                        <button class="btn btn-sm btn-success me-1" @onclick="SaveEntryEdit" disabled="@isEntryEditing">
                                                            @if (isEntryEditing)
                                                            {
                                                                <span class="spinner-border spinner-border-sm"></span>
                                                            }
                                                            else
                                                            {
                                                                <i class="bi bi-check"></i>
                                                            }
                                                        </button>
                                                        <button class="btn btn-sm btn-secondary" @onclick="CancelEntryEdit">
                                                            <i class="bi bi-x"></i>
                                                        </button>
                                                    </td>
                                                </tr>
                                            }
                                            else
                                            {
                                                <!-- View Row -->
                                                <tr>
                                                    <td>
                                                        <span class="badge bg-secondary">@FormatTime(entry.Time)</span>
                                                    </td>
                                                    <td class="text-center fw-bold">
                                                        @if (entry.BinsTipped > 0)
                                                        {
                                                            <span class="text-success">@entry.BinsTipped</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="text-muted">-</span>
                                                        }
                                                    </td>
                                                    <td class="text-center">
                                                        @if (entry.AverageBinWeight > 0)
                                                        {
                                                            <span>@entry.AverageBinWeight.ToString("N0") kg</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="text-muted">-</span>
                                                        }
                                                    </td>
                                                    <td class="text-center">
                                                        @if (entry.DownTime > 0)
                                                        {
                                                            <span class="badge bg-warning text-dark">@entry.DownTime min</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="text-success">0</span>
                                                        }
                                                    </td>
                                                    <td>
                                                        @if (!string.IsNullOrEmpty(entry.ReasonForNotAchievingTarget))
                                                        {
                                                            <span title="@entry.ReasonForNotAchievingTarget">
                                                                @(entry.ReasonForNotAchievingTarget.Length > 50 ? 
                                                                  entry.ReasonForNotAchievingTarget.Substring(0, 50) + "..." : 
                                                                  entry.ReasonForNotAchievingTarget)
                                                            </span>
                                                        }
                                                        else
                                                        {
                                                            <span class="text-muted">-</span>
                                                        }
                                                    </td>
                                                    <td class="text-center">
                                                        @if (entry.IsLunchBreak)
                                                        {
                                                            <span class="badge bg-info">
                                                                <i class="bi bi-cup-hot me-1"></i>Lunch
                                                            </span>
                                                        }
                                                        else
                                                        {
                                                            <span class="badge bg-success">
                                                                <i class="bi bi-gear me-1"></i>Work
                                                            </span>
                                                        }
                                                    </td>
                                                    <td class="text-center">
                                                        <button class="btn btn-sm btn-outline-primary me-1" @onclick="() => EditEntry(entry)">
                                                            <i class="bi bi-pencil"></i>
                                                        </button>
                                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteEntry(entry.Time)">
                                                            <i class="bi bi-trash"></i>
                                                        </button>
                                                    </td>
                                                </tr>
                                            }
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-info">
                                <h6><i class="bi bi-info-circle me-2"></i>No Detailed Entries Found</h6>
                                <p class="mb-0">This report shows summary data but doesn't have individual hourly entries.</p>
                            </div>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-accent me-2" @onclick="() => EditReport(selectedReport)">
                            <i class="bi bi-pencil me-2"></i>Edit Report
                        </button>
                        <button type="button" class="btn btn-secondary" @onclick="CloseReportDetails">Close</button>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Edit Report Modal -->
    @if (selectedReport != null && isEditing)
    {
        <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">
                            <i class="bi bi-pencil me-2"></i>Edit Shift Report - @selectedReport.Date.ToString("dd/MM/yyyy")
                        </h5>
                        <button type="button" class="btn-close" @onclick="CancelEdit"></button>
                    </div>
                    <div class="modal-body">
                        <div class="row g-3">
                            <div class="col-md-6">
                                <label class="form-label fw-bold">
                                    <i class="bi bi-calendar3 me-1"></i>Date
                                </label>
                                <input type="date" class="form-control" value="@editDateString" @onchange="@((e) => editDateString = e.Value?.ToString() ?? "")" />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label fw-bold">
                                    <i class="bi bi-clock me-1"></i>Shift
                                </label>
                                <select class="form-select" @bind="editShift">
                                    <option value="Day">üåÖ Day</option>
                                    <option value="Night">üåô Night</option>
                                </select>
                            </div>
                            <div class="col-12">
                                <label class="form-label fw-bold">
                                    <i class="bi bi-person-badge me-1"></i>Line Manager
                                </label>
                                <input type="text" class="form-control" @bind="editLineManager" placeholder="Enter manager name" />
                            </div>
                            <div class="col-md-4">
                                <label class="form-label fw-bold">
                                    <i class="bi bi-box-seam me-1"></i>Total Bins Tipped
                                </label>
                                <input type="number" class="form-control" @bind="editTotalTipped" min="0" />
                            </div>
                            <div class="col-md-4">
                                <label class="form-label fw-bold">
                                    <i class="bi bi-speedometer2 me-1"></i>Average Weight (kg)
                                </label>
                                <input type="number" class="form-control" @bind="editAverageWeight" min="0" step="1" />
                            </div>
                            <div class="col-md-4">
                                <label class="form-label fw-bold">
                                    <i class="bi bi-stopwatch me-1"></i>Total Downtime (min)
                                </label>
                                <input type="number" class="form-control" @bind="editTotalDowntime" min="0" />
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-accent" @onclick="SaveEdit" disabled="@isSaving">
                            @if (isSaving)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            else
                            {
                                <i class="bi bi-floppy me-2"></i>
                            }
                            Save Changes
                        </button>
                        <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Status Messages -->
    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="alert @(statusMessage.Contains("Success") || statusMessage.Contains("success") ? "alert-success" : "alert-danger") alert-dismissible fade show mt-3">
            @if (statusMessage.Contains("Success") || statusMessage.Contains("success"))
            {
                <i class="bi bi-check-circle me-2"></i>
            }
            else
            {
                <i class="bi bi-exclamation-triangle me-2"></i>
            }
            @statusMessage
            <button type="button" class="btn-close" @onclick="ClearStatusMessage"></button>
        </div>
    }
</div>
</div>

@code {
    private List<ShiftReport> allReports = new();
    private List<ShiftReport> filteredReports = new();
    private List<string> uniqueManagers = new();
    private ShiftReport? selectedReport = null;
    private List<BinTipping> reportEntries = new();
    private bool isLoading = true;
    private bool isEditing = false;
    private bool isSaving = false;
    private string statusMessage = "";

    // Edit form fields
    private string editDateString = "";
    private string editShift = "";
    private string editLineManager = "";
    private int editTotalTipped;
    private double editAverageWeight;
    private int editTotalDowntime;

    // Entry editing fields
    private TimeSpan editingEntryId = TimeSpan.Zero; // Using TimeSpan as identifier since BinTipping doesn't have Id
    private bool isEntryEditing = false;
    private int editEntryBinsTipped;
    private double editEntryWeight;
    private int editEntryDowntime;
    private string editEntryReason = "";
    private bool editEntryIsLunch;

    // Filter properties using strings to avoid timezone issues
    private string fromDateString = DateTime.Today.AddDays(-30).ToString("yyyy-MM-dd");
    private string toDateString = DateTime.Today.AddDays(1).ToString("yyyy-MM-dd");
    
    private DateTime? fromDate => string.IsNullOrEmpty(fromDateString) ? null : DateTime.ParseExact(fromDateString, "yyyy-MM-dd", null);
    private DateTime? toDate => string.IsNullOrEmpty(toDateString) ? null : DateTime.ParseExact(toDateString, "yyyy-MM-dd", null);

    private string _selectedLineManager = "";
    private string selectedLineManager 
    { 
        get => _selectedLineManager; 
        set { _selectedLineManager = value; FilterReports(); } 
    }

    private string _selectedShift = "";
    private string selectedShift 
    { 
        get => _selectedShift; 
        set { _selectedShift = value; FilterReports(); } 
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadReports();
    }

    private async Task LoadReports()
    {
        isLoading = true;
        try
        {
            allReports = await ProductionService.GetAllShiftReportsAsync();
            uniqueManagers = allReports.Select(r => r.LineManager).Distinct().OrderBy(m => m).ToList();
            FilterReports();
            statusMessage = "";
        }
        catch (Exception ex)
        {
            statusMessage = $"Error loading reports: {ex.Message}";
            await JSRuntime.InvokeVoidAsync("console.error", $"Error loading reports: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void FilterReports()
    {
        filteredReports = allReports.Where(r => 
            (fromDate == null || r.Date >= fromDate) &&
            (toDate == null || r.Date <= toDate) &&
            (string.IsNullOrEmpty(selectedLineManager) || r.LineManager == selectedLineManager) &&
            (string.IsNullOrEmpty(selectedShift) || r.Shift == selectedShift)
        ).ToList();
        
        StateHasChanged();
    }

    private async Task RefreshReports()
    {
        await LoadReports();
        statusMessage = "Reports refreshed successfully!";
    }

    private async Task ViewReportDetails(ShiftReport report)
    {
        selectedReport = report;
        isEditing = false;
        
        // Try to load detailed entries for this report
        try
        {
            // Try to get the bin tipping entries - adjust this method call based on your actual service
            reportEntries = report.BinTippings?.ToList() ?? new List<BinTipping>();
            
            // If no entries in the report object, try to fetch them separately
            if (!reportEntries.Any())
            {
                // You might need to implement this method in your service
                // reportEntries = await ProductionService.GetBinTippingEntriesByReportIdAsync(report.Id);
                
                // For now, we'll show that there are no detailed entries
                await JSRuntime.InvokeVoidAsync("console.log", $"No detailed entries found for report {report.Id}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error loading report details: {ex.Message}");
            reportEntries = new List<BinTipping>();
        }
    }

    private void EditReport(ShiftReport report)
    {
        selectedReport = report;
        isEditing = true;
        
        // Populate edit form fields with safer date handling
        // Use the date as it appears in the database, converting carefully to avoid timezone shifts
        editDateString = report.Date.ToString("yyyy-MM-dd");
        editShift = report.Shift;
        editLineManager = report.LineManager;
        editTotalTipped = report.TotalTipped;
        editAverageWeight = report.AverageWeight;
        editTotalDowntime = report.TotalDowntime;
        
        // Debug logging to see what's happening
        JSRuntime.InvokeVoidAsync("console.log", $"üìÖ Original report date: {report.Date:yyyy-MM-dd}");
        JSRuntime.InvokeVoidAsync("console.log", $"üìÖ Edit form date string: {editDateString}");
    }

    private async Task SaveEdit()
    {
        if (selectedReport == null) return;

        isSaving = true;
        try
        {
            // Parse the edit date string with explicit timezone handling
            DateTime editDate;
            if (DateTime.TryParseExact(editDateString, "yyyy-MM-dd", null, System.Globalization.DateTimeStyles.AssumeLocal, out editDate))
            {
                await JSRuntime.InvokeVoidAsync("console.log", $"üìÖ Edit: Successfully parsed date: {editDate:yyyy-MM-dd}");
            }
            else
            {
                // Fallback: manual parsing to ensure no timezone conversion
                var dateParts = editDateString.Split('-');
                if (dateParts.Length == 3)
                {
                    var year = int.Parse(dateParts[0]);
                    var month = int.Parse(dateParts[1]);
                    var day = int.Parse(dateParts[2]);
                    editDate = new DateTime(year, month, day, 0, 0, 0, DateTimeKind.Local);
                    await JSRuntime.InvokeVoidAsync("console.log", $"üìÖ Edit: Manually parsed date: {editDate:yyyy-MM-dd}");
                }
                else
                {
                    throw new FormatException($"Invalid date format: {editDateString}");
                }
            }
            
            await JSRuntime.InvokeVoidAsync("console.log", $"üìÖ Edit: Original date was: {selectedReport.Date:yyyy-MM-dd}");
            await JSRuntime.InvokeVoidAsync("console.log", $"üìÖ Edit: New date will be: {editDate:yyyy-MM-dd}");
            
            // Update the existing report object with new values
            selectedReport.Date = editDate;
            selectedReport.LineManager = editLineManager;
            selectedReport.Shift = editShift;
            selectedReport.TotalTipped = editTotalTipped;
            selectedReport.AverageWeight = editAverageWeight;
            selectedReport.TotalDowntime = editTotalDowntime;

            // Update the report using the existing ShiftReport object
            await ProductionService.UpdateShiftReportAsync(selectedReport.Id, selectedReport);
            
            await JSRuntime.InvokeVoidAsync("console.log", $"üìÖ Edit: Report updated successfully");
            
            // Refresh the reports list
            await LoadReports();
            
            statusMessage = "Report updated successfully!";
            CloseReportDetails();
        }
        catch (Exception ex)
        {
            statusMessage = $"Error updating report: {ex.Message}";
            await JSRuntime.InvokeVoidAsync("console.error", $"Error updating report: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private void CancelEdit()
    {
        isEditing = false;
    }

    private void CloseReportDetails()
    {
        selectedReport = null;
        isEditing = false;
        reportEntries.Clear();
    }

    private async Task DeleteReport(int reportId)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this shift report?"))
        {
            try
            {
                await ProductionService.DeleteShiftReportAsync(reportId);
                await LoadReports();
                statusMessage = "Report deleted successfully!";
            }
            catch (Exception ex)
            {
                statusMessage = $"Error deleting report: {ex.Message}";
                await JSRuntime.InvokeVoidAsync("console.error", $"Error deleting report: {ex.Message}");
            }
        }
    }

    private void ClearStatusMessage()
    {
        statusMessage = "";
    }

    private int GetEntryCount(ShiftReport report)
    {
        return report.BinTippings?.Count ?? 0;
    }

    private double GetAverageWeight()
    {
        return filteredReports.Any() ? filteredReports.Average(r => r.AverageWeight) : 0;
    }

    private double GetAverageEfficiency()
    {
        return filteredReports.Any() ? filteredReports.Average(r => CalculateEfficiency(r)) : 0;
    }

    private double CalculateEfficiency(ShiftReport report)
    {
        var workingEntries = report.BinTippings?.Where(x => !x.IsLunchBreak).Count() ?? 0;
        if (workingEntries <= 0) return 0;
        
        return (double)report.TotalTipped / workingEntries; // Returns bins per hour
    }

    private double CalculateEfficiency(int totalDowntime, int shiftDurationMinutes = 480)
    {
        // Legacy method - kept for backward compatibility but not used
        if (shiftDurationMinutes <= 0) return 0;
        var workingTime = shiftDurationMinutes - totalDowntime;
        return workingTime > 0 ? (double)workingTime / shiftDurationMinutes * 100 : 0;
    }

    private string FormatTime(TimeSpan time)
    {
        return $"{time.Hours:D2}:{time.Minutes:D2}";
    }

    // Entry editing methods
    private void EditEntry(BinTipping entry)
    {
        editingEntryId = entry.Time;
        editEntryBinsTipped = entry.BinsTipped;
        editEntryWeight = entry.AverageBinWeight;
        editEntryDowntime = entry.DownTime;
        editEntryReason = entry.ReasonForNotAchievingTarget;
        editEntryIsLunch = entry.IsLunchBreak;
    }

    private async Task SaveEntryEdit()
    {
        if (selectedReport == null) return;

        isEntryEditing = true;
        try
        {
            // Find the entry to update
            var entryToUpdate = reportEntries.FirstOrDefault(e => e.Time == editingEntryId);
            if (entryToUpdate != null)
            {
                // Update the entry
                entryToUpdate.BinsTipped = editEntryBinsTipped;
                entryToUpdate.AverageBinWeight = editEntryWeight;
                entryToUpdate.DownTime = editEntryDowntime;
                entryToUpdate.ReasonForNotAchievingTarget = editEntryReason;
                entryToUpdate.IsLunchBreak = editEntryIsLunch;

                // Update the entry in the selected report's BinTippings collection
                var reportEntry = selectedReport.BinTippings?.FirstOrDefault(e => e.Time == editingEntryId);
                if (reportEntry != null)
                {
                    reportEntry.BinsTipped = editEntryBinsTipped;
                    reportEntry.AverageBinWeight = editEntryWeight;
                    reportEntry.DownTime = editEntryDowntime;
                    reportEntry.ReasonForNotAchievingTarget = editEntryReason;
                    reportEntry.IsLunchBreak = editEntryIsLunch;
                }

                // Recalculate report totals
                RecalculateReportTotals(selectedReport);

                // Update the report in the database
                await ProductionService.UpdateShiftReportAsync(selectedReport.Id, selectedReport);

                // Refresh the reports list to reflect changes
                await LoadReports();

                statusMessage = "Entry updated successfully!";
                CancelEntryEdit();
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error updating entry: {ex.Message}";
            await JSRuntime.InvokeVoidAsync("console.error", $"Error updating entry: {ex.Message}");
        }
        finally
        {
            isEntryEditing = false;
        }
    }

    private void CancelEntryEdit()
    {
        editingEntryId = TimeSpan.Zero;
        editEntryBinsTipped = 0;
        editEntryWeight = 0;
        editEntryDowntime = 0;
        editEntryReason = "";
        editEntryIsLunch = false;
    }

    private async Task DeleteEntry(TimeSpan entryTime)
    {
        if (selectedReport == null) return;

        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this entry?"))
        {
            try
            {
                // Remove from reportEntries
                var entryToRemove = reportEntries.FirstOrDefault(e => e.Time == entryTime);
                if (entryToRemove != null)
                {
                    reportEntries.Remove(entryToRemove);
                }

                // Remove from selectedReport.BinTippings
                var reportEntryToRemove = selectedReport.BinTippings?.FirstOrDefault(e => e.Time == entryTime);
                if (reportEntryToRemove != null && selectedReport.BinTippings != null)
                {
                    selectedReport.BinTippings.Remove(reportEntryToRemove);
                }

                // Recalculate report totals
                RecalculateReportTotals(selectedReport);

                // Update the report in the database
                await ProductionService.UpdateShiftReportAsync(selectedReport.Id, selectedReport);

                // Refresh the reports list to reflect changes
                await LoadReports();

                statusMessage = "Entry deleted successfully!";
            }
            catch (Exception ex)
            {
                statusMessage = $"Error deleting entry: {ex.Message}";
                await JSRuntime.InvokeVoidAsync("console.error", $"Error deleting entry: {ex.Message}");
            }
        }
    }

    private void RecalculateReportTotals(ShiftReport report)
    {
        if (report.BinTippings == null || !report.BinTippings.Any())
        {
            report.TotalTipped = 0;
            report.AverageWeight = 0;
            report.TotalDowntime = 0;
            return;
        }

        // Calculate totals from the entries
        report.TotalTipped = report.BinTippings.Sum(e => e.BinsTipped);
        report.TotalDowntime = report.BinTippings.Sum(e => e.DownTime);
        
        // Calculate average weight (weighted by bins tipped)
        var totalWeight = report.BinTippings.Sum(e => e.BinsTipped * e.AverageBinWeight);
        report.AverageWeight = report.TotalTipped > 0 ? totalWeight / report.TotalTipped : 0;
    }
}